package generator

import (
	"fmt"
	"strings"

	"github.com/cjp2600/structify/plugin/provider"
	statepkg "github.com/cjp2600/structify/plugin/state"
)

// ContentGenerator is a type for generating content.
type ContentGenerator interface {
	Content() (string, error)
}

// contentGenerator is the content generator.
type contentGenerator struct {
	builder strings.Builder
	state   *statepkg.State

	// TemplateBuilder is the TemplateBuilder for the provider.
	templateBuilder provider.TemplateBuilder
}

// NewContentGenerator returns a new ContentGenerator.
func NewContentGenerator(
	state *statepkg.State,
	templateBuilder provider.TemplateBuilder,
) ContentGenerator {
	return &contentGenerator{
		builder:         strings.Builder{},
		state:           state,
		templateBuilder: templateBuilder,
	}
}

// Content returns the content.
func (c *contentGenerator) Content() (string, error) {
	initStatementTemplater, err := c.templateBuilder.GetInitStatement(c.state)
	if err != nil {
		return "", fmt.Errorf("failed to get init statement: %w", err)
	}

	entities, err := c.templateBuilder.GetEntities(c.state)
	if err != nil {
		return "", fmt.Errorf("failed to get entities: %w", err)
	}

	finalizeStatementTemplater, err := c.templateBuilder.GetFinalizeStatement(c.state)
	if err != nil {
		return "", fmt.Errorf("failed to get finalize statement: %w", err)
	}

	{
		{
			c.builder = c.buildMainComment()
			c.builder = c.buildPackage()
			c.builder = c.buildImports()
		}

		c.builder = c.buildTemplater(initStatementTemplater)
		c.builder = c.buildTemplater(entities...)
		c.builder = c.buildTemplater(finalizeStatementTemplater)
	}

	// return the content
	return c.builder.String(), nil
}

// buildTemplater builds the templater.
func (c *contentGenerator) buildTemplater(temps ...statepkg.Templater) strings.Builder {
	for _, t := range temps {
		if t == nil {
			continue
		}

		c.builder = c.buildBlock(t.BuildTemplate())
	}

	return c.builder
}

// buildPackage builds the package name.
// Example:
//
//	package example
func (c *contentGenerator) buildPackage() strings.Builder {
	c.builder.WriteString("package " + c.state.PackageName + "\n\n")
	return c.builder
}

// buildImports builds the imports.
// Example:
//
//	import (
//		"fmt"
//		"strings"
//	)
func (c *contentGenerator) buildImports() strings.Builder {
	c.buildBlock(c.state.Imports.String())
	return c.builder
}

// buildMainComment builds the main comment.
// Example:
//
//	// Code generated by protoc-gen-structify. DO NOT EDIT.
//	// source: example.proto
//	// provider: mysql
//	package example
func (c *contentGenerator) buildMainComment() strings.Builder {
	c.builder.WriteString("// Code generated by protoc-gen-structify. DO NOT EDIT.\n")
	c.builder.WriteString("// source: ")
	c.builder.WriteString(c.state.FileToGenerate + "\n")
	c.builder.WriteString("// provider: ")
	c.builder.WriteString(c.state.Provider + "\n")
	c.builder.WriteString("// protoc-gen-structify: ")
	c.builder.WriteString(c.state.Version + "\n")
	c.builder.WriteString("// protoc: ")
	c.builder.WriteString(c.state.ProtocVersion + "\n")

	return c.builder
}

// buildConditions builds the conditions.
func (c *contentGenerator) buildBlock(block string) strings.Builder {
	c.builder.WriteString(block)
	c.builder.WriteString("\n")

	return c.builder
}
