package generator

import (
	"testing"

	_import "github.com/cjp2600/protoc-gen-structify/plugin/import"
	statepkg "github.com/cjp2600/protoc-gen-structify/plugin/state"
	plugingo "github.com/golang/protobuf/protoc-gen-go/plugin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// mockTemplateBuilder implements provider.TemplateBuilder for testing
type mockTemplateBuilder struct {
	initStatement     statepkg.Templater
	finalizeStatement statepkg.Templater
	entities          []statepkg.Templater
}

func (m *mockTemplateBuilder) GetInitStatement(state *statepkg.State) (statepkg.Templater, error) {
	return m.initStatement, nil
}

func (m *mockTemplateBuilder) GetFinalizeStatement(state *statepkg.State) (statepkg.Templater, error) {
	return m.finalizeStatement, nil
}

func (m *mockTemplateBuilder) GetEntities(state *statepkg.State) ([]statepkg.Templater, error) {
	return m.entities, nil
}

// mockTemplater implements statepkg.Templater for testing
type mockTemplater struct {
	templateName string
	imports      *_import.ImportSet
	template     string
}

func (m *mockTemplater) TemplateName() string {
	return m.templateName
}

func (m *mockTemplater) Imports() *_import.ImportSet {
	return m.imports
}

func (m *mockTemplater) BuildTemplate() string {
	return m.template
}

func TestNewContentGenerator(t *testing.T) {
	state := &statepkg.State{
		PackageName: "test",
	}
	templateBuilder := &mockTemplateBuilder{}
	request := &Request{
		BaseFileName: "test.proto",
		FilePath: func(s string) string {
			return s + ".db.go"
		},
	}

	generator := NewContentGenerator(state, templateBuilder, request)
	assert.NotNil(t, generator)
}

func TestContentGenerator_Files(t *testing.T) {
	tests := []struct {
		name            string
		state           *statepkg.State
		templateBuilder *mockTemplateBuilder
		request         *Request
		expectedFiles   int
		checkContent    func(t *testing.T, files []*plugingo.CodeGeneratorResponse_File)
	}{
		{
			name: "basic generation",
			state: &statepkg.State{
				PackageName:    "test",
				FileToGenerate: "test.proto",
				Provider:       "mysql",
				Version:        "1.0.0",
				ProtocVersion:  "3.12.0",
				Imports:        _import.NewImportSet(),
			},
			templateBuilder: &mockTemplateBuilder{
				initStatement: &mockTemplater{
					template: "init statement",
					imports:  _import.NewImportSet(),
				},
				finalizeStatement: &mockTemplater{
					template: "finalize statement",
					imports:  _import.NewImportSet(),
				},
				entities: []statepkg.Templater{
					&mockTemplater{
						templateName: "entity1",
						template:     "entity1 content",
						imports:      _import.NewImportSet(),
					},
					&mockTemplater{
						templateName: "entity2",
						template:     "entity2 content",
						imports:      _import.NewImportSet(),
					},
				},
			},
			request: &Request{
				BaseFileName: "test.proto",
				FilePath: func(s string) string {
					return s + ".db.go"
				},
			},
			expectedFiles: 3, // base file + 2 entity files
			checkContent: func(t *testing.T, files []*plugingo.CodeGeneratorResponse_File) {
				// Check base file
				baseFile := files[0]
				assert.Equal(t, "test.proto.db.go", baseFile.GetName())
				content := baseFile.GetContent()
				assert.Contains(t, content, "package test")
				assert.Contains(t, content, "init statement")
				assert.Contains(t, content, "finalize statement")
				assert.Contains(t, content, "Code generated by protoc-gen-structify")

				// Check entity files
				entity1File := files[1]
				assert.Equal(t, "entity1.db.go", entity1File.GetName())
				assert.Contains(t, entity1File.GetContent(), "package test")
				assert.Contains(t, entity1File.GetContent(), "entity1 content")

				entity2File := files[2]
				assert.Equal(t, "entity2.db.go", entity2File.GetName())
				assert.Contains(t, entity2File.GetContent(), "package test")
				assert.Contains(t, entity2File.GetContent(), "entity2 content")
			},
		},
		{
			name: "empty entities",
			state: &statepkg.State{
				PackageName:    "test",
				FileToGenerate: "test.proto",
				Provider:       "mysql",
				Version:        "1.0.0",
				ProtocVersion:  "3.12.0",
				Imports:        _import.NewImportSet(),
			},
			templateBuilder: &mockTemplateBuilder{
				initStatement: &mockTemplater{
					template: "init statement",
					imports:  _import.NewImportSet(),
				},
				finalizeStatement: &mockTemplater{
					template: "finalize statement",
					imports:  _import.NewImportSet(),
				},
				entities: []statepkg.Templater{},
			},
			request: &Request{
				BaseFileName: "test.proto",
				FilePath: func(s string) string {
					return s + ".db.go"
				},
			},
			expectedFiles: 1, // only base file
			checkContent: func(t *testing.T, files []*plugingo.CodeGeneratorResponse_File) {
				baseFile := files[0]
				assert.Equal(t, "test.proto.db.go", baseFile.GetName())
				content := baseFile.GetContent()
				assert.Contains(t, content, "package test")
				assert.Contains(t, content, "init statement")
				assert.Contains(t, content, "finalize statement")
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			generator := NewContentGenerator(tt.state, tt.templateBuilder, tt.request)
			files, err := generator.Files()
			require.NoError(t, err)
			assert.Equal(t, tt.expectedFiles, len(files))
			tt.checkContent(t, files)
		})
	}
}

func TestContentGenerator_BuildPackage(t *testing.T) {
	generator := &contentGenerator{
		state: &statepkg.State{
			PackageName: "test",
		},
	}

	packageStr := generator.buildPackage()
	assert.Equal(t, "package test\n\n", packageStr)
}

func TestContentGenerator_BuildMainComment(t *testing.T) {
	generator := &contentGenerator{
		state: &statepkg.State{
			FileToGenerate: "test.proto",
			Provider:       "mysql",
			Version:        "1.0.0",
			ProtocVersion:  "3.12.0",
		},
	}

	comment := generator.buildMainComment()
	assert.Contains(t, comment, "Code generated by protoc-gen-structify")
	assert.Contains(t, comment, "source: test.proto")
	assert.Contains(t, comment, "provider: mysql")
	assert.Contains(t, comment, "protoc-gen-structify: 1.0.0")
	assert.Contains(t, comment, "protoc: 3.12.0")
}

func TestContentGenerator_BuildBlock(t *testing.T) {
	generator := &contentGenerator{}
	block := generator.buildBlock("test content")
	assert.Equal(t, "test content\n", block.String())
}
